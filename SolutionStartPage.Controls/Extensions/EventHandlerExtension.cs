namespace SolutionStartPage.Controls.Extensions
{
    using System;
    using System.ComponentModel;

    public static class EventHandlerExtension
    {
        /// <summary>
        /// Invokes an event safely, so that no exception will be thrown, if the event has no subscribers.
        /// </summary>
        /// <param name="self">Represents the method that will handle an event when the event provides data.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object that contains the event data.</param>
        public static void SafeInvoke(this EventHandler self, object sender, EventArgs e)
        {
            if (self != null)
                self(sender, e);
        }

        /// <summary>
        /// Invokes an event safely, so that no exception will be thrown, if the event has no subscribers.
        /// </summary>
        /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
        /// <param name="self">Represents the method that will handle an event when the event provides data.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object that contains the event data.</param>
        public static void SafeInvoke<TEventArgs>(this EventHandler<TEventArgs> self, object sender, TEventArgs e) where TEventArgs : EventArgs
        {
            if (self != null)
                self(sender, e);
        }

        /// <summary>
        /// Invokes a PropertyChangedEvent safely, so that no exception will be thrown, if the PropertyChangedEvent has no subscribers.
        /// </summary>
        /// <param name="self">Represents the method that will handle an PropertyChangedEvent when the PropertyChangedEvent provides data.</param>
        /// <param name="sender">The source of the PropertyChangedEvent.</param>
        /// <param name="propertyName">The name of the property that changed.</param>
        public static void SafeInvoke(this PropertyChangedEventHandler self, object sender,
            string propertyName)
        {
            if (self != null)
                self(sender, new PropertyChangedEventArgs(propertyName));
        }
    }
}